"use strict";(self.webpackChunkmac_setup=self.webpackChunkmac_setup||[]).push([[4446],{583:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/index","title":"Python","description":"macOS, like Linux, ships with Python already installed.","source":"@site/docs/python/index.md","sourceDirName":"python","slug":"/python/","permalink":"/mac-setup/python/","draft":false,"unlisted":false,"editUrl":"https://github.com/sb2nov/mac-setup/tree/main/docs/python/index.md","tags":[],"version":"current","frontMatter":{"title":"Python"},"sidebar":"tutorialSidebar","previous":{"title":"PostgreSQL","permalink":"/mac-setup/postgresql"},"next":{"title":"Pip","permalink":"/mac-setup/python/pip"}}');var o=s(4848),i=s(8453);const l={title:"Python"},a=void 0,r={},c=[{value:"Installation",id:"installation",level:2},{value:"Homebrew method",id:"homebrew-method",level:3},{value:"Python 3",id:"python-3",level:4},{value:"Python 2.7",id:"python-27",level:4},{value:"Pyenv method",id:"pyenv-method",level:3},{value:"Application-specific Python version",id:"application-specific-python-version",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["macOS, like Linux, ships with ",(0,o.jsx)(n.a,{href:"https://python.org/",children:"Python"})," already installed.\nBut you don't want to mess with the system Python (some system tools rely on\nit, etc.), so we'll install our own version(s). There are two ways to install\nPython, (1) Homebrew and (2) Pyenv. If you plan to use multiple versions of\nPython (e.g. 2, 3, and anaconda) then you should use pyenv."]}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.h3,{id:"homebrew-method",children:"Homebrew method"}),"\n",(0,o.jsx)(n.p,{children:"Python 3 is the default version when installing with Homebrew, so if you want\nto install Python 2.7 you'll have to be explicit about it."}),"\n",(0,o.jsx)(n.h4,{id:"python-3",children:"Python 3"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"brew install python\n"})}),"\n",(0,o.jsx)(n.h4,{id:"python-27",children:"Python 2.7"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"brew install python@2\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Installing Python also installs ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/setuptools/",children:"pip"}),"\n(and its dependency ",(0,o.jsx)(n.a,{href:"https://pypi.python.org/pypi/setuptools",children:"Setuptools"}),"),\nwhich is the package manager for Python. Let's upgrade them both:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"pip install --upgrade setuptools\npip install --upgrade pip\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executable scripts from Python packages you install will be put in\n",(0,o.jsx)(n.code,{children:"/usr/local/share/python"}),", make sure it's on your ",(0,o.jsx)(n.code,{children:"PATH"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"pyenv-method",children:"Pyenv method"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/yyuu/pyenv",children:(0,o.jsx)(n.code,{children:"pyenv"})})," is a Python version manager that can\nmanage and install different versions of Python. Works very much like ",(0,o.jsx)(n.code,{children:"rbenv"}),"\nfor Ruby. First, we must install ",(0,o.jsx)(n.code,{children:"pyenv"})," using Homebrew:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"brew install pyenv\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To upgrade ",(0,o.jsx)(n.code,{children:"pyenv"})," in the future, use ",(0,o.jsx)(n.code,{children:"upgrade"})," instead of ",(0,o.jsx)(n.code,{children:"install"}),". After\ninstalling, add ",(0,o.jsx)(n.code,{children:"pyenv init"})," to your shell to enable shims and autocompletion\n(use ",(0,o.jsx)(n.code,{children:".zshrc"})," if you're using ",(0,o.jsx)(n.code,{children:"zsh"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile\n"})}),"\n",(0,o.jsx)(n.p,{children:"Restart your shell to make sure the path changes take effect."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"exec $SHELL\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can now begin using ",(0,o.jsx)(n.code,{children:"pyenv"}),". To list the all available versions of Python,\nincluding Anaconda, Jython, PyPy and Stackless, use:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"pyenv install --list\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then install the desired versions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"pyenv install 2.7.12\npyenv install 3.5.2\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"global"})," command to set global version(s) of Python to be used in all\nshells. For example, if you prefer 2.7.12 over 3.5.2:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"pyenv global 2.7.12 3.5.2\npyenv rehash\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The leading version takes priority. All installed Python versions can be\nlocated in ",(0,o.jsx)(n.code,{children:"~/.pyenv/versions"}),". Alternatively, you can run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"$ pyenv versions\n  system (set by /Users/your_account/.pyenv/version)\n* 2.7.12\n* 3.5.2\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This shows an asterisk ",(0,o.jsx)(n.code,{children:"*"})," next to the currently active version."]}),"\n",(0,o.jsx)(n.h3,{id:"application-specific-python-version",children:"Application-specific Python version"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"local"})," command will set local application-specific Python version(s) by\nwriting the version name to a ",(0,o.jsx)(n.code,{children:".python-version"})," file in the current directory.\nThis version overrides the global version. For example, to install\nanaconda3-4.1.1 in ",(0,o.jsx)(n.code,{children:"path/to/directory"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"$ pyenv install anaconda3-4.1.1\n$ cd path/to/directory\n$ pyenv local anaconda3-4.1.1\n$ pyenv rehash\n$ pyenv versions\n  system\n  2.7.12\n  3.5.2\n* anaconda3-4.1.1 (set by /Users/your_account/path/to/directory/.python-version)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);